@use '../base/variables' as *;
@use '../base/mixins' as *;

// TranslationWindow component styles - for Shadow DOM injection
// CRITICAL: Complete isolation from host page styles

// CSS Custom Properties for component-specific overrides - scoped to :host
:host {
  // Window-specific animation properties
  --ti-window-border-radius: #{$border-radius-lg};
  --ti-window-opacity-hidden: 0;
  --ti-window-opacity-visible: 0.9;
  --ti-window-transform-hidden: scale(0.95);
  --ti-window-transform-visible: scale(1);
  --ti-window-visibility-hidden: hidden;
  --ti-window-visibility-visible: visible;
  --ti-window-transition: opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1),
                            transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1),
                            visibility 0.4s cubic-bezier(0.25, 0.8, 0.25, 1),
                            width 0.4s cubic-bezier(0.25, 0.8, 0.25, 1),
                            height 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);

  // Loading window properties
  --ti-loading-width: 60px;
  --ti-loading-height: 40px;
  --ti-loading-bg-light: #ffffff;
  --ti-loading-bg-dark: #333333;
  --ti-loading-border-light: rgba(0, 0, 0, 0.1);
  --ti-loading-border-dark: rgba(255, 255, 255, 0.2);

  // Window dimensions using proper SCSS->CSS conversion
  @include window-dimensions;

  // CRITICAL: Ensure proper positioning and z-index
  position: fixed !important;
  z-index: 2147483647 !important;
  pointer-events: none !important;
}

// Base window styles with CSS Grid layout and Modern Containment
.ti-window {
  border-radius: var(--ti-window-border-radius);
  @include shadow-lg;
  display: grid;
  grid-template-rows: auto 1fr; // header auto, body flexible
  font-family: $font-family-base;
  opacity: var(--ti-window-opacity-hidden);
  transform: var(--ti-window-transform-hidden);
  transition: var(--ti-window-transition);
  visibility: var(--ti-window-visibility-hidden);
  direction: ltr !important;
  text-align: left !important;
  unicode-bidi: plaintext !important;

  // CRITICAL: Ensure proper positioning and z-index override external styles
  position: fixed !important;
  z-index: 2147483646 !important;
  pointer-events: all !important;

  // Modern CSS containment for performance
  container-type: inline-size; // Enable container queries
  contain: layout style; // Establish layout and style containment
  isolation: isolate; // Create new stacking context

  // Disable transitions when dragging
  &.is-dragging {
    transition: none;
  }

  // Loading window specific styles
  &.ti-loading-window {
    width: var(--ti-loading-width);
    height: var(--ti-loading-height);
    min-width: var(--ti-loading-width);
    min-height: var(--ti-loading-height);
    max-width: var(--ti-loading-width);
    max-height: var(--ti-loading-height);
    border-radius: 20px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--ti-loading-bg-light);
    border: $border-width $border-style var(--ti-loading-border-light);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    position: fixed !important;

    // Loading window visibility override
    &.visible {
      opacity: var(--ti-window-opacity-visible);
      transform: var(--ti-window-transform-visible);
      visibility: var(--ti-window-visibility-visible);
    }

    // Dark theme for loading window
    &.dark {
      background: var(--ti-loading-bg-dark);
      border-color: var(--ti-loading-border-dark);

      &.visible {
        opacity: var(--ti-window-opacity-visible);
        transform: var(--ti-window-transform-visible);
        visibility: var(--ti-window-visibility-visible);
      }
    }
  }

  // Normal window - using safe CSS variable function
  &.normal-window {
    width: #{css-var('normal-window-width', $selection-window-max-width)};
    height: max-content; // Height based on content
    min-height: #{css-var('normal-window-min-height', 120px)};
    max-height: #{css-var('normal-window-max-height', 400px)}; // Add max height for scrolling
    overflow: hidden; // Establish containment context
    display: flex;
    flex-direction: column; // Ensure proper layout for scrollable content
  }

  &.visible {
    opacity: var(--ti-window-opacity-visible);
    transform: var(--ti-window-transform-visible);
    visibility: var(--ti-window-visibility-visible);
  }

  // Light theme with increased specificity
  &.light {
    background-color: var(--bg-color, #ffffff);
    border: $border-width $border-style var(--border-color, #e8e8e8);
    color: var(--text-color, #2c3e50);

    // Light theme header with maximum specificity
    .ti-window-header {
      background-color: var(--header-bg-color, #f7f7f7);
      border-bottom: $border-width $border-style var(--header-border-color, #e8e8e8);
    }

    // Light theme action buttons with maximum specificity
    .ti-action-btn {
      background-color: var(--toolbar-link-hover-bg-color, #f0f0f0);
      color: var(--text-color, #555);

      &:hover {
        background-color: var(--bg-color, #e5e5e5);
      }
    }
  }

  // Dark theme with increased specificity
  &.dark {
    background-color: var(--bg-color, #2d2d2d);
    border: $border-width $border-style var(--border-color, #424242);
    color: var(--text-color, #e0e0e0);

    // Dark theme header with maximum specificity
    .ti-window-header {
      background-color: var(--header-bg-color, #333333);
      border-bottom: $border-width $border-style var(--header-border-color, #424242);
    }

    // Dark theme action buttons with maximum specificity
    .ti-action-btn {
      background-color: var(--toolbar-link-hover-bg-color, #424242);
      color: var(--text-color, #e0e0e0);

      &:hover {
        background-color: var(--border-color, #555555);
      }
    }
  }
}

// Component-specific styles with maximum specificity
// Window header with increased specificity
.ti-window .ti-window-header,
.ti-window-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: $spacing-sm $spacing-base;
  cursor: move;
  user-select: none;
  background-color: var(--header-bg-color, #f8f9fa);
  border-bottom: $border-width $border-style var(--header-border-color, #e8e8e8);
  border-radius: var(--ti-window-border-radius) var(--ti-window-border-radius) 0 0;
}

// Header actions with increased specificity
.ti-window .ti-header-actions,
.ti-header-actions {
  display: flex;
  align-items: center;
  gap: $spacing-sm;
  flex: 1;
}

// Header close section with increased specificity
.ti-window .ti-header-close,
.ti-header-close {
  display: flex;
  align-items: center;
  margin-left: auto;
}

// Action button with increased specificity
.ti-window .ti-action-btn,
.ti-action-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--ti-action-btn-size);
  height: var(--ti-action-btn-size);
  border: none;
  border-radius: var(--ti-action-btn-border-radius);
  cursor: pointer;
  background-color: transparent;
  @include transition-fast(background-color);

  &:hover {
    background-color: var(--toolbar-link-hover-bg-color, rgba(0, 0, 0, 0.1));
  }
}

// Window body with safe CSS variable usage
.ti-window .ti-window-body,
.ti-window-body {
  padding: #{css-var('window-padding', $spacing-md)};
  min-height: #{css-var('normal-window-min-height', 120px)};
  display: flex;
  flex-direction: column;
  margin-left: #{css-var('window-body-margin', 5px)};
  margin-right: #{css-var('window-body-margin', 5px)};
  flex: 1; // Take remaining space in flex container
  overflow-y: auto; // Enable vertical scrolling when content exceeds height
  overflow-x: clip; // Modern way to clip overflow

  // Content constraint with natural flow
  width: 100%; // Take full width of parent
  overflow-wrap: break-word; // Break long words naturally

  // Modern CSS containment for better isolation
  contain: layout style paint; // Full containment for maximum isolation
  isolation: isolate; // Create stacking context
  box-sizing: border-box; // Include padding in width

  // List styles for dictionary/definition content
  .ti-window-body ul,
  .ti-window-body ol {
    // Reset default padding
    padding: 0;
    margin: 8px 0;
  }

  // LTR content
  .ti-window-body[dir="ltr"] ul,
  .ti-window-body[dir="ltr"] ol,
  .ti-window-body .simple-markdown[dir="ltr"] ul,
  .ti-window-body .simple-markdown[dir="ltr"] ol {
    padding-left: 20px;
    padding-right: 0;
  }

  // RTL content
  [dir="rtl"] .ti-window-body ul,
  [dir="rtl"] .ti-window-body ol,
  .ti-window-body[dir="rtl"] ul,
  .ti-window-body[dir="rtl"] ol,
  [dir="rtl"] .simple-markdown ul,
  [dir="rtl"] .simple-markdown ol,
  .simple-markdown[dir="rtl"] ul,
  .simple-markdown[dir="rtl"] ol {
    padding-left: 0;
    padding-right: 20px;
  }

  // List items
  li {
    // Ensure proper spacing between list items
    margin-bottom: 4px;

    &:last-child {
      margin-bottom: 0;
    }
  }

  // Nested lists
  ul ul, ol ol, ul ol, ol ul {
    margin-top: 4px;
    margin-bottom: 4px;
  }

  // Firefox scrollbar
  scrollbar-width: thin;
  scrollbar-color: rgba(0, 0, 0, 0.2) transparent;

  // Markdown content styling
  .simple-markdown {
    // Ensure paragraphs have proper spacing
    p {
      margin-bottom: 8px;

      &:last-child {
        margin-bottom: 0;
      }
    }

    // Style for labeled definitions (e.g., "نوع: اسم")
    strong {
      font-weight: 600;
      color: var(--color-text, inherit);
    }

    // Code blocks
    pre {
      background-color: var(--color-code-inline-bg, rgba(0, 0, 0, 0.1));
      padding: 8px;
      border-radius: 4px;
      overflow-x: auto;
      margin: 8px 0;
    }

    code {
      background-color: var(--color-code-inline-bg, rgba(0, 0, 0, 0.1));
      padding: 2px 4px;
      border-radius: 3px;
      font-family: monospace;
      font-size: 0.9em;
    }
  }

  // Custom scrollbar styling
  &::-webkit-scrollbar {
    width: 6px;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 3px;
    transition: background-color 0.2s ease;

    &:hover {
      background-color: rgba(0, 0, 0, 0.3);
    }
  }

  // Dark theme scrollbar
  .ti-window.dark & {
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;

    &::-webkit-scrollbar-thumb {
      background-color: rgba(255, 255, 255, 0.2);

      &:hover {
        background-color: rgba(255, 255, 255, 0.3);
      }
    }
  }
}

// Dark theme specific overrides
.ti-window.dark .ti-window-header {
  background-color: var(--header-bg-color, #373737);
  border-bottom-color: var(--header-border-color, #4a4a4a);
}

.ti-window.dark .ti-action-btn:hover {
  background-color: var(--toolbar-link-hover-bg-color, rgba(255, 255, 255, 0.1));
}

// Dark theme dictionary label fixes
.ti-window.dark .ti-window-body .simple-markdown strong {
  color: var(--text-color, #e8eaed) !important;
}

// Light theme specific overrides
.ti-window.light .ti-window-header {
  background-color: var(--header-bg-color, #f8f9fa);
  border-bottom-color: var(--header-border-color, #e8e8e8);
}

.ti-window.light .ti-action-btn:hover {
  background-color: var(--toolbar-link-hover-bg-color, rgba(0, 0, 0, 0.05));
}