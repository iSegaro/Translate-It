// Content script entry point - Optimized for lazy loading
// Minimal initial load with on-demand feature loading

import { contentScriptCore } from './ContentScriptCore.js';

// Initialize the content script with minimal footprint
(async () => {
  try {
    // Initialize only critical infrastructure
    const initialized = await contentScriptCore.initialize();

    if (initialized) {
      // Listen for extension popup open
      chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
        if (message.action === 'popupOpened') {
          // Load Vue app when user opens extension
          contentScriptCore.loadVueApp();
        }
      });

      // Listen for user interactions that require features
      document.addEventListener('click', handleUserInteraction, { once: true });
      document.addEventListener('keydown', handleUserInteraction, { once: true });

      // Debug info
      if (process.env.NODE_ENV === 'development') {
        console.log('Translate It: Content script initialized (lazy mode)', {
          core: true,
          vue: contentScriptCore.isVueLoaded(),
          features: contentScriptCore.areFeaturesLoaded()
        });
      }
    }
  } catch (error) {
    console.error('Failed to initialize content script:', error);
  }
})();

// Handle first user interaction to preload features
function handleUserInteraction() {
  // Preload features after first interaction
  setTimeout(() => {
    contentScriptCore.loadFeatures();
  }, 1000);

  // Remove listeners after first interaction
  document.removeEventListener('click', handleUserInteraction);
  document.removeEventListener('keydown', handleUserInteraction);
}

// Export for debugging
window.translateItContentScriptCore = contentScriptCore;